{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\josep\\\\Desktop\\\\GitHub\\\\guessWho\\\\Front-End-2\\\\src\\\\components\\\\CandidateCard.js\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nconst CardDiv = styled.div`\n    display: flex;\n    width: 475px;\n    height: 150px;\n    border: 2px solid black;\n    border-radius: 75px 5px 40px 75px;\n    font-family: Arial, \"Helvetica Neue\", Helvetica, sans-serif;\n    margin: 15px auto;\n`;\nconst Portrait = styled.img`\n    width: 150px;\n    height: 150px;\n    border-radius: 50%;\n`;\nconst Blurb = styled.div`\n    width: 300px;\n    height: 150px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n`;\nconst CardName = styled.h2`\n    margin: 0;\n    font-size: 1.5rem;\n`;\nconst CardText = styled.p`\n    margin: 0;\n    font-size: .85rem;\n`;\nconst CardButton = styled.button`\n    width: 7em;\n    height: 2em;\n    font-size: 1.1rem;\n    @import url('https://fonts.googleapis.com/css?family=Patua+One|Roboto&display=swap');\n    font-family: 'Patua One', cursive;\n    margin-left: auto;\n    margin-right: auto;\n    border: 1px solid black;\n    border-radius: .2em;\n    background-color: #1DA1F2;\n    color: white;\n`;\n\nconst CandidateCard = props => {\n  function handleTurn() {\n    if (props.currentPlayerID < props.playerList.length - 1) {\n      props.setCurrentPlayerID(props.currentPlayerID + 1);\n    } else {\n      props.setCurrentPlayerID(0);\n      props.setTurns(props.turns - 1);\n    }\n  }\n\n  function sendPointsAndUpdateLevel(account) {\n    // Find account in playerlist by username\n    var playerListAccount = props.playerList.find(function (player) {\n      return player.name === account.username;\n    }); // update the point values of the account\n\n    account.points += playerListAccount.points; // send points to server\n\n    axios.put(`https://bw-guess-who.herokuapp.com/api/users/${account.id}`, {\n      points: account.points\n    }).then(response => {\n      console.log(`updated points for ${account.username}`);\n    }).catch(error => {\n      console.log(`There was an error for ${account.username}`, error);\n    }); // if the account has more than 10 points upgrade him to Intermediate\n\n    if (account.points >= 10 && account.level === \"Beginner\") {\n      account.level = \"Intermediate\";\n      axios.put(`https://bw-guess-who.herokuapp.com/api/users/${account.id}`, {\n        level: \"Intermediate\"\n      }).then(response => {\n        console.log(`updated level for ${account.username}`);\n      }).catch(error => {\n        console.log(`There was an error for ${account.username}`, error);\n      });\n    } // if the account has more than 30 points upgrade him to Advanced\n\n\n    if (account.points >= 30 && account.level === \"Intermediate\") {\n      account.level = \"Advanced\";\n      axios.put(`https://bw-guess-who.herokuapp.com/api/users/${account.id}`, {\n        level: \"Advanced\"\n      }).then(response => {\n        console.log(`updated level for ${account.username}`);\n      }).catch(error => {\n        console.log(`There was an error for ${account.username}`, error);\n      });\n    }\n  }\n\n  function tryGuess() {\n    props.setGuess(props.name);\n\n    if (props.name === props.mysteryCandidate.name && props.turns > 0) {\n      alert(`Correct! Your guess was: ${props.name}.`);\n      props.setUpBoard();\n      props.playerList[props.currentPlayerID].points += 1;\n      handleTurn();\n    } else if (props.turns > 0) {\n      alert(`Incorrect! Your guess was ${props.name}. The correct answer was ${props.mysteryCandidate.name}.`);\n      props.setUpBoard();\n      handleTurn();\n    } else {\n      // the game is over\n      // reset the candidate list and tweets\n      props.setRandomList([]);\n      props.setTweet(\"\"); // set the game to ended\n\n      props.setGameStarted(\"ended\"); // update stats for the host\n\n      sendPointsAndUpdateLevel(props.loggedInUser); // update stats for additional users\n\n      props.additionalUsers.forEach(function (user) {\n        sendPointsAndUpdateLevel(user);\n      });\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(CardDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Portrait, {\n    src: props.portrait,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Blurb, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CardName, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  }, props.name), /*#__PURE__*/React.createElement(CardText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }, \"Party: \", props.party), /*#__PURE__*/React.createElement(CardText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }, props.description), /*#__PURE__*/React.createElement(CardButton, {\n    onClick: tryGuess,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, \"Guess\")));\n};\n\nexport default CandidateCard;","map":{"version":3,"sources":["C:/Users/josep/Desktop/GitHub/guessWho/Front-End-2/src/components/CandidateCard.js"],"names":["React","styled","axios","CardDiv","div","Portrait","img","Blurb","CardName","h2","CardText","p","CardButton","button","CandidateCard","props","handleTurn","currentPlayerID","playerList","length","setCurrentPlayerID","setTurns","turns","sendPointsAndUpdateLevel","account","playerListAccount","find","player","name","username","points","put","id","then","response","console","log","catch","error","level","tryGuess","setGuess","mysteryCandidate","alert","setUpBoard","setRandomList","setTweet","setGameStarted","loggedInUser","additionalUsers","forEach","user","portrait","party","description"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport axios from \"axios\";\r\n\r\nconst CardDiv = styled.div`\r\n    display: flex;\r\n    width: 475px;\r\n    height: 150px;\r\n    border: 2px solid black;\r\n    border-radius: 75px 5px 40px 75px;\r\n    font-family: Arial, \"Helvetica Neue\", Helvetica, sans-serif;\r\n    margin: 15px auto;\r\n`;\r\n\r\nconst Portrait = styled.img`\r\n    width: 150px;\r\n    height: 150px;\r\n    border-radius: 50%;\r\n`;\r\n\r\nconst Blurb = styled.div`\r\n    width: 300px;\r\n    height: 150px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n`;\r\n\r\nconst CardName = styled.h2`\r\n    margin: 0;\r\n    font-size: 1.5rem;\r\n`;\r\n\r\nconst CardText = styled.p`\r\n    margin: 0;\r\n    font-size: .85rem;\r\n`;\r\n\r\nconst CardButton = styled.button`\r\n    width: 7em;\r\n    height: 2em;\r\n    font-size: 1.1rem;\r\n    @import url('https://fonts.googleapis.com/css?family=Patua+One|Roboto&display=swap');\r\n    font-family: 'Patua One', cursive;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    border: 1px solid black;\r\n    border-radius: .2em;\r\n    background-color: #1DA1F2;\r\n    color: white;\r\n`;\r\n\r\n\r\nconst CandidateCard = props => {\r\n\r\n    function handleTurn() {\r\n        if (props.currentPlayerID < (props.playerList.length - 1)) {\r\n            props.setCurrentPlayerID(props.currentPlayerID + 1);\r\n        } else {\r\n            props.setCurrentPlayerID(0);\r\n            props.setTurns(props.turns - 1 );\r\n        }\r\n    }\r\n\r\n    function sendPointsAndUpdateLevel(account) {\r\n        // Find account in playerlist by username\r\n        var playerListAccount = props.playerList.find(function(player) {\r\n            return player.name === account.username;\r\n        });\r\n        \r\n        // update the point values of the account\r\n        account.points += playerListAccount.points;\r\n\r\n        // send points to server\r\n        axios\r\n        .put(`https://bw-guess-who.herokuapp.com/api/users/${account.id}`, { points: account.points })\r\n        .then(response => {\r\n            console.log(`updated points for ${account.username}`);\r\n        })\r\n        .catch(error => {\r\n            console.log(`There was an error for ${account.username}`, error);\r\n        })\r\n\r\n        // if the account has more than 10 points upgrade him to Intermediate\r\n        if (account.points >= 10 && account.level === \"Beginner\") {\r\n            account.level = \"Intermediate\";\r\n            axios\r\n            .put(`https://bw-guess-who.herokuapp.com/api/users/${account.id}`, { level: \"Intermediate\" })\r\n            .then(response => {\r\n                console.log(`updated level for ${account.username}`);\r\n            })\r\n            .catch(error => {\r\n                console.log(`There was an error for ${account.username}`, error);\r\n            })\r\n        }\r\n\r\n        // if the account has more than 30 points upgrade him to Advanced\r\n        if (account.points >= 30 && account.level === \"Intermediate\") {\r\n            account.level = \"Advanced\";\r\n            axios\r\n            .put(`https://bw-guess-who.herokuapp.com/api/users/${account.id}`, { level: \"Advanced\" })\r\n            .then(response => {\r\n                console.log(`updated level for ${account.username}`);\r\n            })\r\n            .catch(error => {\r\n                console.log(`There was an error for ${account.username}`, error);\r\n            })\r\n        }\r\n    }\r\n    \r\n    function tryGuess() {\r\n        props.setGuess(props.name);\r\n\r\n        if (props.name === props.mysteryCandidate.name && props.turns > 0) {\r\n            alert(`Correct! Your guess was: ${props.name}.`);\r\n            props.setUpBoard();\r\n            props.playerList[props.currentPlayerID].points += 1;\r\n            handleTurn()\r\n        } else if (props.turns > 0) {\r\n            alert(`Incorrect! Your guess was ${props.name}. The correct answer was ${props.mysteryCandidate.name}.`);\r\n            props.setUpBoard();\r\n            handleTurn()\r\n        } else {\r\n            // the game is over\r\n            // reset the candidate list and tweets\r\n            props.setRandomList([]);\r\n            props.setTweet(\"\");\r\n            // set the game to ended\r\n            props.setGameStarted(\"ended\");\r\n\r\n            // update stats for the host\r\n            sendPointsAndUpdateLevel(props.loggedInUser);\r\n\r\n            // update stats for additional users\r\n            props.additionalUsers.forEach(function(user) {\r\n                sendPointsAndUpdateLevel(user);\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <CardDiv>\r\n            <Portrait src={props.portrait}></Portrait>\r\n            <Blurb>\r\n                <CardName>{props.name}</CardName>\r\n                <CardText>Party: {props.party}</CardText>\r\n                <CardText>{props.description}</CardText>\r\n                <CardButton onClick={tryGuess}>Guess</CardButton>\r\n            </Blurb>\r\n        </CardDiv>\r\n    )\r\n}\r\n\r\nexport default CandidateCard;"]},"metadata":{},"sourceType":"module"}